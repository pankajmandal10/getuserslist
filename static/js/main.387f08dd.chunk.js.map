{"version":3,"sources":["component/Navbar.js","component/Profile.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","collapseOnSelect","expand","bg","variant","to","Link","eventKey","href","Pricing","useState","profileName","setProfileName","profileCell","setProfileCell","profileImage","setProfileImage","profileEmail","setProfileEmail","profileData","a","axios","get","res","data","results","cell","email","picture","large","name","first","last","console","log","useEffect","onClick","src","style","width","path","component","Profile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSA2BeA,EAtBA,WACb,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CACAC,kBAAgB,EAChBC,OAAO,KACPC,GAAG,SACHC,QAAQ,OACRJ,UAAU,QAEV,kBAAC,IAAD,CAAMK,GAAG,WAAWL,UAAW,WACvB,kBAAC,IAAmBM,KAApB,CAAyBC,SAAU,EAAGC,KAAK,YAA3C,e,kDCiCCC,G,MA7CC,WAAO,IAAD,EAGkBC,mBAAS,IAH3B,mBAGbC,EAHa,KAGAC,EAHA,OAIkBF,mBAAS,IAJ3B,mBAIbG,EAJa,KAIAC,EAJA,OAKoBJ,mBAAS,IAL7B,mBAKbK,EALa,KAKCC,EALD,OAMoBN,mBAAS,IAN7B,mBAMbO,EANa,KAMCC,EAND,KAQdC,EAAW,uCAAG,4BAAAC,EAAA,+EAGEC,IAAMC,IAAI,8BAHZ,OAGVC,EAHU,OAIhBT,EAAeS,EAAIC,KAAKC,QAAQ,GAAGC,MACnCR,EAAgBK,EAAIC,KAAKC,QAAQ,GAAGE,OACpCX,EAAgBO,EAAIC,KAAKC,QAAQ,GAAGG,QAAQC,OAC5CjB,EAAe,GAAD,OACTW,EAAIC,KAAKC,QAAQ,GAAGK,KAAKC,MADhB,YACyBR,EAAIC,KAAKC,QAAQ,GAAGK,KAAKE,OARhD,kDAWhBC,QAAQC,IAAR,MAXgB,0DAAH,qDAoBjB,OANAD,QAAQC,IAAIf,GAEZgB,qBAAU,WACRhB,MACC,IAGD,6BACE,4BAAQiB,QAAS,kBAAMjB,MAAvB,cACA,yBAAKnB,UAAU,QACb,yBAAKqC,IAAKtB,EAAcuB,MAAO,CAAEC,MAAO,UACxC,4BAAK5B,GACL,uBAAGX,UAAU,SAASiB,GACtB,2BAAIJ,GACJ,2BACE,gD,QClBKd,EAfA,WACb,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,KAAK,WAAWC,UAAWC,GAChC,kBAAC,EAAD,WCHQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.387f08dd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport * as ReactBootStrap from \"react-bootstrap\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <div className=\"App\">\n      <ReactBootStrap.Navbar\n      collapseOnSelect\n      expand=\"xl\"\n      bg=\"danger\"\n      variant=\"dark\"\n      className=\"nava\"\n    >\n      <Link to=\"/Profile\" className= \"bg-dark\">\n              <ReactBootStrap.Nav.Link eventKey={6} href=\"#Profile\">\n                Profile\n              </ReactBootStrap.Nav.Link>\n     </Link>\n     \n     </ReactBootStrap.Navbar>\n     \n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Profile.css\";\n\nconst Pricing = () => {\n\n  \n  const [profileName, setProfileName] = useState(\"\");\n  const [profileCell, setProfileCell] = useState(\"\");\n  const [profileImage, setProfileImage] = useState(\"\");\n  const [profileEmail, setProfileEmail] = useState(\"\");\n\n  const profileData = async () => {\n    try {\n     \n      const res = await axios.get(\"https://randomuser.me/api/\");\n      setProfileCell(res.data.results[0].cell);\n      setProfileEmail(res.data.results[0].email);\n      setProfileImage(res.data.results[0].picture.large);\n      setProfileName(\n        `${res.data.results[0].name.first} ${res.data.results[0].name.last}`\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  console.log(profileData);\n\n  useEffect(() => {\n    profileData();\n  }, []);\n\n  return (\n    <div>\n      <button onClick={() => profileData()}>New Person</button>\n      <div className=\"card\">\n        <img src={profileImage} style={{ width: \"100%\" }} />\n        <h1>{profileName}</h1>\n        <p className=\"title\">{profileEmail}</p>\n        <p>{profileCell}</p>\n        <p>\n          <button>Contact</button>\n        </p>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default Pricing;\n","import React from \"react\";\nimport \"./App.css\";\nimport * as ReactBootStrap from \"react-bootstrap\";\nimport Navbar from \"./component/Navbar\";\nimport Profile from \"./component/Profile\";\nimport { BrowserRouter as Router, Switch, Route,} from \"react-router-dom\";\n\n\nconst NavBar = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/Profile\" component={Profile}>\n            <Profile />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default NavBar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}